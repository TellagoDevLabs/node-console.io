{"name":"console.io","tagline":"A remote control for your nodejs service.","body":"console.io allows you to access the console of your running node.js instances\r\nand even execute code remotely. View the a [demo](http://www.screencast.com/t/3wrAbR12)\r\n\r\n## Features\r\n\r\n- Read the stderr and stdout from a website in real-time.\r\n- Execute code remotely in a specific running node.js process.\r\n- Built in dashboard allows for multiple consoles at the same time.\r\n- Hookable api for using console.io in your own front end.\r\n\r\n## Running the Dashboard\r\n\r\n1.  node app.js\r\n2.  open http://localhost:8080 in the browser (dashboard).\r\n3.  cd client && node sample.js\r\n4.  open http://localhost:8081 in the browser.\r\n\r\nIn order to see another console in the dashboard, run sample2.js (8082) as well.\r\n\r\n### Logs\r\nLogs will start showing in real time. Errors will be displayed in red.\r\n\r\n### Prompt\r\nThere will be a prompt with the name of the host, where you can start running\r\nscripts. Notice that if you want to see something in the output you are going\r\nto have to either:\r\n\r\n- Call console.log('your message') from within your script.\r\n- Return whatever to want to be printed.\r\n\r\n#### Examples\r\n```js\r\n\t//this will print 4.\r\n\treturn 2 + 2;\r\n\r\n\t//this will print undefined.\r\n\t2 + 2;\r\n\r\n\t//this will print 4 and then undefined.\r\n\tconsole.log(2 + 2);\r\n```\r\n\r\nThe script will be printed right before the result, so that other dashboards\r\nlooking at the console, see the script and can make something out of the output\r\n\r\n## Running console.io in your own Dashboard\r\n\r\nIf you would like to see the logs in your own front end, you pass an instance\r\nof socket.io to the \"server\" module.\r\n\r\n```js\r\n    require('console.io/server').hook(io);\r\n```\r\n\r\nFrom the website perspective it's pretty easy to receive messages. You start by\r\nsubscribing to the 'web' namespace. You can see how it works in the \r\n\\public\\index.html file.\r\n\r\n## Adding console.io to your node.js app\r\n\r\nYou will find that integrating console.io to your node.js apps is ridiculously\r\nsimple.\r\n\r\n### Example\r\n\r\n```js\r\n\tncc.connect({\r\n\t\t\tendpoint: \"http://localhost:8080\",\r\n\t\t\tname: \"marketplace\"\r\n\t\t}, function(err, result){\r\n\t});\r\n```\r\n\r\n### Installation\r\n\r\n```\r\n\tnpm install console.io-client\r\n```\r\n\r\n### Usage\r\n\r\nAdd this once in every node.js process:\r\n\r\n```js\r\n\tvar ncc = require('console.io-client');\r\n\tncc.connect(options, callback);\r\n```\r\n\r\n### Options\r\n\r\n* `endpoint`: url to the dashboard.\r\n* `name`: unique name of this particular node.js process.\r\n* `disableExec`: disable the remote execution of code.\r\n\r\n### Contributors\r\n- [Silvio Massari](https://github.com/silviom)\r\n- [Gustavo Machado](https://github.com/machadogj)\r\n\r\n## License \r\n\r\n[MIT License](http://www.opensource.org/licenses/mit-license.php)","note":"Don't delete this file! It's used internally to help with page regeneration.","google":""}